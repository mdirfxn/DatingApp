@inject HttpClient _client

<EditForm Model="@message" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Message: </label>
            <div>
                <InputText @bind-Value="@message.Content" class="form-control" />
                <ValidationMessage For="@(() => message.Content)" />
            </div>
        </div>

        <div class="form-group">
            <label>Send To: </label>
            <div>
                <InputSelect @bind-Value="message.StaffId" class="form-control">
                    <option value="">-- Select Staff --</option>
                    @if (Staffs != null)
                    {
                        foreach (var staff in Staffs)
                        {
                            <option value="@staff.Id">@staff.StaffName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => message.StaffId)" />
            </div>
        </div>
    </fieldset>
    <br />
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="messages" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Message? message { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Staff>? Staffs;

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }
}
